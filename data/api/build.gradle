import dependencies.Dep

apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.android.library'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-kapt'

apply from: rootProject.file('gradle/android.gradle')
android.libraryVariants.all {
    // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
    it.generateBuildConfig.enabled = true
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')
        fromPreset(presets.iosX64, 'iosX64')
        fromPreset(presets.iosArm64, 'iosArm64')

    }
    sourceSets {
        commonMain.dependencies {
            implementation Dep.Kotlin.stdlibCommon
            implementation Dep.Kotlin.coroutinesCommon
            implementation Dep.Ktor.clientCommon
            implementation Dep.Ktor.jsonCommon
            implementation Dep.Ktor.serializationCommon
            implementation Dep.Kotlin.serializationCommon
        }
        androidMain {
            dependsOn commonMain
            dependencies {
                implementation Dep.Kotlin.stdlibJvm
                implementation Dep.Kotlin.androidCoroutinesDispatcher
                implementation Dep.Ktor.clientAndroid
                implementation Dep.Ktor.jsonJvm
                implementation Dep.Ktor.serializationJvm
                implementation Dep.Kotlin.serializationAndroid
                implementation Dep.OkHttp.client
                implementation Dep.Stetho.stetho
                implementation Dep.Dagger.core
                implementation Dep.Dagger.androidSupport
                implementation Dep.OkHttp.loggingInterceptor
            }
        }
        androidTest {
            dependsOn androidMain
            dependencies {
                implementation Dep.Test.junit
                implementation Dep.Test.slf4j
            }
        }
        iOSMain {
            final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
            if (mode == "RELEASE") {
                kotlin.srcDirs += "src/iosMain/kotlinRelease"
            } else {
                kotlin.srcDirs += "src/iosMain/kotlinDebug"
            }
            dependsOn commonMain
            dependencies {
                implementation Dep.Kotlin.coroutinesNative
                implementation Dep.Ktor.clientIos
                implementation Dep.Ktor.jsonNative
                implementation Dep.Ktor.serializationNative
                implementation Dep.Kotlin.serializationIos
            }
        }
        configure(iosX64Main) {
            dependsOn iOSMain
            dependencies {
                implementation Dep.Ktor.clientIosX64
                implementation Dep.Ktor.jsonIosIosX64
                implementation Dep.Ktor.serializationIosX64
            }
        }
        configure(iosArm64Main) {
            dependsOn iOSMain
            dependencies {
                implementation Dep.Ktor.clientIosArm64
                implementation Dep.Ktor.jsonIosArm64
                implementation Dep.Ktor.serializationIosArm64
            }
        }
    }
}

android {
    defaultConfig {
        buildConfigField "String", "API_ENDPOINT", "\"https://droidkaigi2019-dev.appspot.com/api\""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_ENDPOINT", "\"https://droidkaigi-api.appspot.com/2019/api\""
        }
    }
}

dependencies {
    kapt Dep.Dagger.compiler
    kapt Dep.Dagger.androidProcessor
}

configurations {
    compileClasspath
}
